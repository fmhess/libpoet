<header name="poet/future_barrier.hpp">
	<namespace name="poet">
		<overloaded-function name="future_barrier">
			<signature>
				<template>
					<template-type-parameter name="FutureInputIterator"/>
				</template>
				<type><classname>future</classname>&lt;void&gt;</type>
				<parameter name="first">
					<paramtype>FutureInputIterator</paramtype>
				</parameter>
				<parameter name="last">
					<paramtype>FutureInputIterator</paramtype>
				</parameter>
			</signature>
			<signature>
				<template>
					<template-type-parameter name="T1"/>
					<template-type-parameter name="T2"/>
				</template>
				<type><classname>future</classname>&lt;void&gt;</type>
				<parameter name="f1">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
				<parameter name="f2">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
			</signature>
			<signature>
				<template>
					<template-type-parameter name="T1"/>
					<template-type-parameter name="T2, ..."/>
					<template-type-parameter name="TN"/>
				</template>
				<type><classname>future</classname>&lt;void&gt;</type>
				<parameter name="f1">
					<paramtype>const <classname>future</classname>&lt;T1&gt; &amp;</paramtype>
				</parameter>
				<parameter name="f2">
					<paramtype>const <classname>future</classname>&lt;T2&gt; &amp;</paramtype>
				</parameter>
				<parameter name="...">
					<paramtype></paramtype>
				</parameter>
				<parameter name="fN">
					<paramtype>const <classname>future</classname>&lt;TN&gt; &amp;</paramtype>
				</parameter>
			</signature>
			<description>
				<para>
					The <code>future_barrier</code> function constructs a future which can be used to
					wait on a group of futures until they are all ready (or have exceptions).
				</para>
				<itemizedlist>
					<title>See also</title>
					<listitem>
						<para>
							<functionname>future_select</functionname>: construct a future which becomes ready when any of a group of futures is ready or has an exception.
						</para>
					</listitem>
				</itemizedlist>
			</description>
			<returns>
				<para>
					A future which becomes ready when all of the input futures either become
					ready or have exceptions.
				</para>
			</returns>
		</overloaded-function>
	</namespace>
</header>
