<header name="poet/monitor_locks.hpp">
	<namespace name="poet">
		<class name="monitor_unique_lock">
			<template>
				<template-type-parameter name="MonitorType"/>
			</template>
			<purpose>unique_lock with monitor object access</purpose>
			<description>
				<para>
					<code>monitor_unique_lock</code> is an extension of <classname>boost::unique_lock</classname>
					from the
					<ulink url="http://www.boost.org/doc/html/thread.html">Boost.Thread</ulink>
					library.  It extends the interface of
					<classname>boost::unique_lock</classname> by adding <methodname>operator-&gt;</methodname>
					and <methodname>operator*</methodname> methods, which permit access to
					the object protected by the lock's associated monitor.  This tight
					coupling of locking with access helps insure
					the monitor's mutex is always locked when the object it is protecting
					is accessed.
				</para>
				<para>
					The <code>MonitorType</code>
					template type parameter may be one of the <classname>monitor</classname>
					or <classname>monitor_ptr</classname> types.
				</para>
				<description>
					<para>
						See the documentation of boost::unique_lock in the Boost.Thread library for more information
						about the unique_lock interface.
					</para>
				</description>
			</description>
			<access name="public">
				<typedef name="monitor_type">
					<type>MonitorType</type>
				</typedef>
				<typedef name="element_type">
					<type>MonitorType::element_type</type>
					<purpose>will additionally be const-qualified if MonitorType is "const monitor&lt;T&gt;"</purpose>
				</typedef>
				<method-group name="public boost::unique_lock interface">
					<method name="lock">
						<type>void</type>
					</method>
					<method name="move">
						<type>boost::detail::thread_move_t&lt;monitor_unique_lock&gt;</type>
					</method>
					<method name="mutex" cv="const">
						<type>MonitorType *</type>
					</method>
					<method name="operator=">
						<type>monitor_unique_lock &amp;</type>
						<parameter>
							<paramtype>boost::detail::thread_move_t&lt;monitor_unique_lock&gt;</paramtype>
						</parameter>
					</method>
					<method name="operator=">
						<type>monitor_unique_lock &amp;</type>
						<parameter>
							<paramtype>boost::detail::thread_move_t&lt;monitor_upgrade_lock&gt;</paramtype>
						</parameter>
					</method>
					<method name="operator!" cv="const">
						<type>bool</type>
					</method>
					<method name="operator boost::detail::thread_move_t&lt;monitor_unique_lock&gt;">
					</method>
					<method name="operator unspecified_bool_type" cv="const">
					</method>
					<method name="owns_lock" cv="const">
						<type>bool</type>
					</method>
					<method name="release">
						<type>MonitorType *</type>
					</method>
					<method name="swap">
						<type>void</type>
						<parameter name="other">
							<paramtype>monitor_unique_lock &amp;</paramtype>
						</parameter>
					</method>
					<method name="timed_lock">
						<template>
							<template-type-parameter name="Timeout"/>
						</template>
						<type>bool</type>
						<parameter name="t">
							<paramtype>const Timeout &amp;</paramtype>
						</parameter>
					</method>
					<method name="try_lock">
						<type>bool</type>
					</method>
					<method name="unlock">
						<type>void</type>
					</method>
				</method-group>
				<method-group name="public member functions">
					<method name="operator-&gt;" cv="const">
						<type>element_type *</type>
						<description>
							<para>Provides access to the members of the object protected by the lock's associated
								monitor.
							</para>
						</description>
						<throws>
							<para>
								<classname>boost::lock_error</classname> if <code>owns_lock() != true</code>.
							</para>
						</throws>
					</method>
					<method name="operator*" cv="const">
						<type>element_type &amp;</type>
						<description>
							<para>Provides access to the object protected by the lock's associated
								monitor.
							</para>
						</description>
						<throws>
							<para>
								<classname>boost::lock_error</classname> if <code>owns_lock() != true</code>.
							</para>
						</throws>
					</method>
				</method-group>
				<constructor specifiers="explicit">
					<parameter name="mon">
						<paramtype>MonitorType &amp;</paramtype>
					</parameter>
					<description>
						<para>
							Calls lock().  Internally, the monitor_unique_lock stores a <classname>monitor_ptr</classname>
							to use as a reference to the object protected by the <code>mon</code> argument.  Thus the
							monitor_unique_lock shares ownership and may safely outlive the <code>mon</code> object.
						</para>
					</description>
				</constructor>
				<constructor>
					<template>
						<template-type-parameter name="T"/>
					</template>
					<parameter name="mon">
						<paramtype>MonitorType &amp;</paramtype>
					</parameter>
					<parameter name="arg">
						<paramtype>const T &amp;</paramtype>
					</parameter>
					<description>
						<para>
							This constructor corresponds to all the 2 argument constructors of boost::unique_lock.
							The second argument may thus be of type <classname>boost::adopt_lock_t</classname>,
							<classname>boost::defer_lock_t</classname>, <classname>boost::try_to_lock_t</classname>,
							or <classname>boost::system_time</classname>.
						</para>
					</description>
				</constructor>
				<constructor>
					<parameter name="other">
						<paramtype>boost::detail::thread_move_t&lt;monitor_unique_lock&gt;</paramtype>
					</parameter>
					<description>
						<para>
							Move constructor.
						</para>
					</description>
				</constructor>
				<constructor>
					<parameter name="other">
						<paramtype>boost::detail::thread_move_t&lt;monitor_upgrade_lock&lt;MonitorType&gt; &gt;</paramtype>
					</parameter>
					<description>
						<para>
							Move constructor.  The upgrade_lock is upgraded to a unique_lock as it is moved into <code>*this</code>.
						</para>
					</description>
				</constructor>
				<constructor>
					<description>
						<para>
							The default constructor creates an empty lock that is not associated with any monitor object.
							The empty lock can only be made useful by moving another another lock into it.
						</para>
					</description>
				</constructor>
				<destructor>
					<description>
						<para>If <code>owns_lock()</code>, calls <code>unlock()</code>.</para>
					</description>
				</destructor>
			</access>
			<access name="private">
				<copy-assignment>
					<parameter name="other">
						<paramtype>monitor_unique_lock &amp;</paramtype>
					</parameter>
					<description>
						<para>
							Locks are moveable but not copyable.
						</para>
					</description>
				</copy-assignment>
				<constructor>
					<parameter name="other">
						<paramtype>monitor_unique_lock &amp;</paramtype>
					</parameter>
					<description>
						<para>
							Locks are moveable but not copyable.
						</para>
					</description>
				</constructor>
			</access>
		</class>
		<class name="monitor_shared_lock">
			<template>
				<template-type-parameter name="MonitorType"/>
			</template>
			<purpose>shared_lock with monitor object access</purpose>
			<description>
				<para>
					<code>monitor_shared_lock</code> is an extension of <classname>boost::shared_lock</classname>
					from the
					<ulink url="http://www.boost.org/doc/html/thread.html">Boost.Thread</ulink>
					library.  It extends the interface of
					<classname>boost::shared_lock</classname> by adding <methodname>operator-&gt;</methodname>
					and <methodname>operator*</methodname> methods, which permit access to
					the object protected by the lock's associated monitor.  This tight
					coupling of locking with access helps insure
					the monitor's mutex is always locked when the object it is protecting
					is accessed.
				</para>
				<para>
					Unlike <classname>monitor_unique_lock</classname>, the <methodname>operator-&gt;</methodname>
					and <methodname>operator*</methodname> of <code>monitor_shared_lock</code>
					only permit <code>const</code>
					access to the associated object.  This helps prevent unintended
					modification of the object while only holding a shared_lock.
				</para>
				<para>
					The <code>MonitorType</code>
					template type parameter may be one of the <classname>monitor</classname>
					or <classname>monitor_ptr</classname> types.
				</para>
				<description>
					<para>
						See the documentation of boost::shared_lock in the Boost.Thread library for more information
						about the shared_lock interface.
					</para>
				</description>
			</description>
			<access name="public">
				<typedef name="monitor_type">
					<type>MonitorType</type>
				</typedef>
				<typedef name="element_type">
					<type>MonitorType::element_type</type>
					<purpose>will additionally be const-qualified if MonitorType is "const monitor&lt;T&gt;"</purpose>
				</typedef>
				<method-group name="public boost::shared_lock interface">
					<method name="lock">
						<type>void</type>
					</method>
					<method name="move">
						<type>boost::detail::thread_move_t&lt;monitor_shared_lock&gt;</type>
					</method>
					<method name="mutex" cv="const">
						<type>MonitorType *</type>
					</method>
					<method name="operator=">
						<type>monitor_shared_lock &amp;</type>
						<parameter>
							<paramtype>boost::detail::thread_move_t&lt;monitor_shared_lock&gt;</paramtype>
						</parameter>
					</method>
					<method name="operator=">
						<type>monitor_shared_lock &amp;</type>
						<parameter>
							<paramtype>boost::detail::thread_move_t&lt;monitor_upgrade_lock&gt;</paramtype>
						</parameter>
					</method>
					<method name="operator=">
						<type>monitor_shared_lock &amp;</type>
						<parameter>
							<paramtype>boost::detail::thread_move_t&lt;monitor_unique_lock&gt;</paramtype>
						</parameter>
					</method>
					<method name="operator!" cv="const">
						<type>bool</type>
					</method>
					<method name="operator boost::detail::thread_move_t&lt;monitor_shared_lock&gt;">
					</method>
					<method name="operator unspecified_bool_type" cv="const">
					</method>
					<method name="owns_lock" cv="const">
						<type>bool</type>
					</method>
					<method name="release">
						<type>MonitorType *</type>
					</method>
					<method name="swap">
						<type>void</type>
						<parameter name="other">
							<paramtype>monitor_shared_lock &amp;</paramtype>
						</parameter>
					</method>
					<method name="timed_lock">
						<template>
							<template-type-parameter name="Timeout"/>
						</template>
						<type>bool</type>
						<parameter name="t">
							<paramtype>const Timeout &amp;</paramtype>
						</parameter>
					</method>
					<method name="try_lock">
						<type>bool</type>
					</method>
					<method name="unlock">
						<type>void</type>
					</method>
				</method-group>
				<method-group name="public member functions">
					<method name="operator-&gt;" cv="const">
						<type>const element_type *</type>
						<description>
							<para>Provides <code>const</code> access to the members of the object protected by the lock's associated
								monitor.
							</para>
						</description>
						<throws>
							<para>
								<classname>boost::lock_error</classname> if <code>owns_lock() != true</code>.
							</para>
						</throws>
					</method>
					<method name="operator*" cv="const">
						<type>const element_type &amp;</type>
						<description>
							<para>Provides <code>const</code> access to the object protected by the lock's associated
								monitor.
							</para>
						</description>
						<throws>
							<para>
								<classname>boost::lock_error</classname> if <code>owns_lock() != true</code>.
							</para>
						</throws>
					</method>
				</method-group>
				<constructor specifiers="explicit">
					<parameter name="mon">
						<paramtype>MonitorType &amp;</paramtype>
					</parameter>
					<description>
						<para>
							Calls lock().  Internally, the monitor_shared_lock stores a <classname>monitor_ptr</classname>
							to use as a reference to the object protected by the <code>mon</code> argument.  Thus the
							monitor_shared_lock shares ownership and may safely outlive the <code>mon</code> object.
						</para>
					</description>
				</constructor>
				<constructor>
					<template>
						<template-type-parameter name="T"/>
					</template>
					<parameter name="mon">
						<paramtype>MonitorType &amp;</paramtype>
					</parameter>
					<parameter name="arg">
						<paramtype>const T &amp;</paramtype>
					</parameter>
					<description>
						<para>
							This constructor corresponds to all the 2 argument constructors of boost::shared_lock.
							The second argument may thus be of type <classname>boost::adopt_lock_t</classname>,
							<classname>boost::defer_lock_t</classname>, <classname>boost::try_to_lock_t</classname>,
							or <classname>boost::system_time</classname>.
						</para>
					</description>
				</constructor>
				<constructor>
					<parameter name="other">
						<paramtype>boost::detail::thread_move_t&lt;monitor_shared_lock&gt;</paramtype>
					</parameter>
					<description>
						<para>
							Move constructor.
						</para>
					</description>
				</constructor>
				<constructor>
					<parameter name="other">
						<paramtype>boost::detail::thread_move_t&lt;monitor_upgrade_lock&lt;MonitorType&gt; &gt;</paramtype>
					</parameter>
					<description>
						<para>
							Move constructor.
						</para>
					</description>
				</constructor>
				<constructor>
					<parameter name="other">
						<paramtype>boost::detail::thread_move_t&lt;monitor_unique_lock&lt;MonitorType&gt; &gt;</paramtype>
					</parameter>
					<description>
						<para>
							Move constructor.  The unique_lock is downgraded to a shared_lock as it is moved into <code>*this</code>.
						</para>
					</description>
				</constructor>
				<constructor>
					<description>
						<para>
							The default constructor creates an empty lock that is not associated with any monitor object.
							The empty lock can only be made useful by moving another another lock into it.
						</para>
					</description>
				</constructor>
				<destructor>
					<description>
						<para>If <code>owns_lock()</code>, calls <code>unlock()</code>.</para>
					</description>
				</destructor>
			</access>
			<access name="private">
				<copy-assignment>
					<parameter name="other">
						<paramtype>monitor_shared_lock &amp;</paramtype>
					</parameter>
					<description>
						<para>
							Locks are moveable but not copyable.
						</para>
					</description>
				</copy-assignment>
				<constructor>
					<parameter name="other">
						<paramtype>monitor_shared_lock &amp;</paramtype>
					</parameter>
					<description>
						<para>
							Locks are moveable but not copyable.
						</para>
					</description>
				</constructor>
			</access>
		</class>
	</namespace>
</header>
